package org.example;
/*–í–æ –≤—Ö–æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ —Ö—Ä–∞–Ω—è—Ç—Å—è –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –∏ –∏—Ö —à–∏—Ñ—Ä—ã.
–ü–æ—Å—Ç—Ä–æ–∏—Ç—å —Å–ø–∏—Å–æ–∫ C1, —ç–ª–µ–º–µ–Ω—Ç—ã –∫–æ—Ç–æ—Ä–æ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∏ —à–∏—Ñ—Ä—ã –æ–±—ä–µ–∫—Ç–æ–≤,
–ø—Ä–∏—á—ë–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–ø–æ—Ä—è–¥–æ—á–µ–Ω—ã –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é —à–∏—Ñ—Ä–æ–≤. –ó–∞—Ç–µ–º ¬´—Å–∂–∞—Ç—å¬ª
—Å–ø–∏—Å–æ–∫ C1, —É–¥–∞–ª—è—è –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ (–æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ —à–∏—Ñ—Ä—É
–¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è).*/
import java.io.*;
import java.util.*;

public class App {
    static class Item implements Comparable<Item> {
        String name;
        int code;

        Item(String name, int code) {
            this.name = name;
            this.code = code;
        }

        @Override
        public int compareTo(Item other) {
            return Integer.compare(this.code, other.code);
        }

        @Override
        public String toString() {
            return name + " " + code;
        }
    }

    public static void main(String[] args) {
        List<Item> items = new ArrayList<>();

        // üìÇ –Ø–≤–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤–Ω—É—Ç—Ä–∏ src
        File inputFile = new File("src/input.txt");
        if (!inputFile.exists()) {
            System.out.println("–§–∞–π–ª input.txt –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–∞–ø–∫–µ src.");
            return;
        }

        // üì• –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        try (Scanner scanner = new Scanner(inputFile)) {
            while (scanner.hasNext()) {
                String name = scanner.next();
                if (scanner.hasNextInt()) {
                    int code = scanner.nextInt();
                    items.add(new Item(name, code));
                }
            }
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
            return;
        }

        // üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞
        List<Item> result = process(items);

        // üì§ –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        try (PrintWriter writer = new PrintWriter("src/output.txt")) {
            for (Item item : result) {
                writer.println(item);
            }
        } catch (Exception e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: " + e.getMessage());
        }
    }

    // ‚úÖ –ú–µ—Ç–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –ª–æ–≥–∏–∫–∏
    public static List<Item> process(List<Item> items) {
        Collections.sort(items);
        List<Item> result = new ArrayList<>();
        Set<String> seen = new HashSet<>();
        for (Item item : items) {
            if (!seen.contains(item.name)) {
                result.add(item);
                seen.add(item.name);
            }
        }
        return result;
    }
}
